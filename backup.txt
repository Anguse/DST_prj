
#include "system_sam3x.h" 
#include "at91sam3x8.h" 
int buttonInterrupt = 0;
int systick = 0;
void setLED(int nLED){          //Enables or disables LED
  
  
  if(nLED == 1){
  *AT91C_PIOD_SODR |= (1 << 3);
  }
  else{
  *AT91C_PIOD_CODR |= (1 << 3);
  }
}

int readButton(){               //Checks if the button is pressed
   int button = *AT91C_PIOD_PDSR & (0x2);          //PIO_PDSR(PIOD)
   if(button == 0){                 //Button pushed -> true
     setLED(1);
     return 1;
   } 
   else{
     setLED(0);
     return 0;                     //Button not pushed -> false
   }
}
void enableSystick(){              
  SysTick_Config(8400000);
}
void SysTick_Handler(){     
  systick++;
  if(systick==10){
    systick = 0;
    if(((*AT91C_PIOD_ODSR >> 3) & 1)==0){ //If the LED is disabled, enable it
      setLED(1);
    }
    else{                                 //Else disable
      setLED(0);
    }
  }
}
void PIOD_Handler(void){                
  int button = (*AT91C_PIOD_ISR >> 0) & 1;
  int clock = *AT91C_NVIC_STICKCSR & (1);
  if(button==0){        //Did the button cause the interrupt?
    buttonInterrupt++;
    NVIC_ClearPendingIRQ(PIOD_IRQn);
    if(clock == 1){     //If the systick is enabled, disable it
      *AT91C_NVIC_STICKCSR &= ~(1 << 0);
    }
    else{               //Else enable it
      enableSystick();
    }
  }
}
void initiate_keypad(){
  *AT91C_PMC_PCER |= 1 << 13;   //Initiate peripheral clock for PIOC
  *AT91C_PIOD_PER |= 1 << 2;    //Enable PIOD (pin 2)
  *AT91C_PIOC_PER = 0x3BC;      //Enable PIOC (pin 2-5,7-9)
  *AT91C_PIOC_PPUDR = 0x3C;     //Pull up disable PIOC (pin 2-5)
  *AT91C_PIOC_ODR = 0x3C;       //Output disable PIOC (pin 2-5)
  *AT91C_PIOD_OER |= 1 << 2;    //Output enable PIOD (pin 2)
  *AT91C_PIOC_OER = 0x380;      //Output enable PIOC (pin 7-9)
  *AT91C_PIOD_CODR = 0x4;       //Clear PIOD (pin 2)
  *AT91C_PIOC_CODR = 0x380;     //Clear PIOC (pin 7-9)
  *AT91C_PIOC_SODR = 0x380;     //Set PIOC (pin 7-9)
}
void initiate_button_input(){
  *AT91C_PMC_PCER |= 1 << 14;               //PMC_PCER(PIOD)
  *AT91C_PIOD_PER = 0xA;                 //PIOD_PER
  *AT91C_PIOD_ODR = 0x2;               //PIOD_ODR
  *AT91C_PIOD_PPUER = 0x2;               //PIOD_PUER
  *AT91C_PIOD_OER = 0x8;                //PIOD_OER
  *AT91C_PIOD_CODR = 0;
}
void initiate_interrupt_handler(){
  *AT91C_PIOD_AIMER = 0x2;
  *AT91C_PIOD_IFER = 0x2;
  *AT91C_PIOD_IFSR = 0x2;
  *AT91C_PIOD_SCDR = 261;
  NVIC_ClearPendingIRQ(PIOD_IRQn);
  NVIC_SetPriority(PIOD_IRQn, PIOD_IRQn);
  NVIC_EnableIRQ(PIOD_IRQn);
  *AT91C_PIOD_PER = 0x2;
  *AT91C_PIOD_IER = 0x2;
}
void delay(int value){
  for(int i = 0; i < value; i++){
    asm("nop");
  }
}

unsigned char read_status_display(void){
  unsigned char temp;
  
  *AT91C_PIOC_SODR = 0x3FC;     //Databus as input
  *AT91C_PIOC_SODR = 0x2000;     //DIR as input
  *AT91C_PIOC_CODR = 0x1000;    //DIR as output (CLEAR)
  *AT91C_PIOC_SODR = 0x20000;   //Set C/D
  *AT91C_PIOC_CODR = 0x10000;   //Clear CE
  *AT91C_PIOC_CODR = 0x8000;    //Clear RD
  delay(50);                    //~120nS delay
  temp = (*AT91C_PIOC_PDSR >> 2);
  temp = temp & 0x3;
  *AT91C_PIOC_SODR = 0x10000;   //Set CE
  *AT91C_PIOC_SODR = 0x8000;    //Set RD
  *AT91C_PIOC_SODR = 0x1000;    //Output disabled
  *AT91C_PIOC_CODR = 0x2000;    //Clear DIR -> Output
  return temp;
  
}
void Write_Command_2_Display(unsigned char command){
  unsigned char temp = 0;
  while(temp!=3){        //Wait until display is ready
    temp = read_status_display();
  }
  *AT91C_PIOC_CODR = 0x3FC;     //Clear databus
  *AT91C_PIOC_SODR = (command<<2); //Command to databus
  *AT91C_PIOC_CODR = 0x2000;    //DIR as output
  *AT91C_PIOC_CODR = 0x1000;    //Output enable
  *AT91C_PIOC_OER = 0x3FC;     //Databus as output
  *AT91C_PIOC_SODR = 0x20000;   //Set C/D
  *AT91C_PIOC_CODR = 0x10000;   //Clear CE
  *AT91C_PIOC_CODR = 0x4000;    //Clear write display?
  delay(50);
  *AT91C_PIOC_SODR = 0x10000;   //Set chip enable display
  *AT91C_PIOC_SODR = 0x4000;    //Set write display
  *AT91C_PIOC_SODR = 0x1000;    //Output disabled
  *AT91C_PIOC_ODR = 0x3FC;     //Databus as input
}

void Write_Data_2_Display(unsigned char data){
  unsigned char temp = 0;
  while(temp!=3){        //Wait until display is ready
    temp = read_status_display();
  }
  *AT91C_PIOC_CODR = 0x3FC;     //Clear databus
  *AT91C_PIOC_SODR = (data<<2); //Command to databus
  *AT91C_PIOC_CODR = 0x2000;    //DIR as output
  *AT91C_PIOC_CODR = 0x1000;    //Output enable
  *AT91C_PIOC_OER = 0x3FC;     //Databus as output
  *AT91C_PIOC_CODR = 0x20000;   //Clear C/D
  *AT91C_PIOC_CODR = 0x10000;   //Clear CE
  *AT91C_PIOC_CODR = 0x4000;    //Clear write display?
  delay(50);
  *AT91C_PIOC_SODR = 0x10000;   //Set chip enable display
  *AT91C_PIOC_SODR = 0x4000;    //Set write display
  *AT91C_PIOC_SODR = 0x1000;    //Output disabled
  *AT91C_PIOC_ODR = 0x3FC;     //Databus as input
}
void clear_display(void){
  Write_Data_2_Display(0x00);
  Write_Data_2_Display(0x00);
  Write_Command_2_Display(0x24);
     
  for (int a=0 ; a<1000; a++){
    Write_Data_2_Display(0x00);
    Write_Command_2_Display(0xC0);
  }
     
   Write_Data_2_Display(0x00);
   Write_Data_2_Display(0x00);
   Write_Command_2_Display(0x24);
}
int read_keypad(void){
  int value = 0;
  int value2 = 0;
  unsigned int row;
  *AT91C_PIOD_CODR = 0x4;       //Clear OE key bus
  *AT91C_PIOC_OER = 0x380;      //Make all column pins as output
  *AT91C_PIOC_SODR = 0x380;     //Set all column pins as high
  unsigned int colVec[3] = {0x200,0x100,0x080};
  for(int i = 0; i < 3; i++){   //Columns
    *AT91C_PIOC_CODR = colVec[i];    //Clear current column
    for(int j = 0; j < 4; j++){         //Rows
      row = *AT91C_PIOC_PDSR >> (j+2);      //Read row
      row = row & 0x1;
      if(row == 0){                     //check if bit is 0
        value = j*3+i+1;              
      }
    }
    
    *AT91C_PIOC_SODR = 0x380;
  }
  delay(1500000);
  for(int i = 0; i < 3; i++){   //Columns
    *AT91C_PIOC_CODR = colVec[i];    //Clear current column
    for(int j = 0; j < 4; j++){         //Rows
      row = *AT91C_PIOC_PDSR >> (j+2);      //Read row
      row = row & 0x1;
      if(row == 0){                     //check if bit is 0
        value2 = j*3+i+1;              
      }
    }
    
    *AT91C_PIOC_SODR = 0x380;
  }  
  if(value == value2 && value == 10){
    clear_display();
    value = 0;
  }
  *AT91C_PIOC_ODR = 0x380;              //Make all column pin as input
  *AT91C_PIOD_SODR = 0x4;               //Set OE KEY BUS (Active Low)
  return value;
}



void init_display(void){

  *AT91C_PIOC_PER=0x000FF3FC;
  *AT91C_PIOC_OER = 0xFF3FC;
  *AT91C_PIOD_PER=0x1;
  *AT91C_PIOD_OER=0x1;
  *AT91C_PIOD_CODR=0x1; // Clear reset Display
  
  delay(50);
  
  *AT91C_PIOD_SODR=0x1; // Set reset Display
  
  Write_Data_2_Display(0x00);
  Write_Data_2_Display(0x00);
  Write_Command_2_Display(0x40);//Set text home address
  Write_Data_2_Display(0x00);
  Write_Data_2_Display(0x40);
  Write_Command_2_Display(0x42); //Set graphic home address
  Write_Data_2_Display(0x1e);
  Write_Data_2_Display(0x00);
  Write_Command_2_Display(0x41); // Set text area
  Write_Data_2_Display(0x1e);
  Write_Data_2_Display(0x00);
  Write_Command_2_Display(0x43); // Set graphic area
  Write_Command_2_Display(0x80); // text mode
  Write_Command_2_Display(0x94); // Text on graphic off 
 
}


void write_2_display(int key){
  if(key!=0){
    unsigned int commands[13] = {0x00,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0xA,0x10,0x3}; 
    Write_Data_2_Display(commands[key]);
    Write_Command_2_Display(0xC0);
  }
  
}

void main(void){
  SystemInit(); //Disables the watchdog and setup the MCK
  initiate_button_input();
  initiate_interrupt_handler();
  initiate_keypad();
  //enableSystick();
  init_display();
  clear_display();
  
  while(1){
    int key = read_keypad();
    write_2_display(key);
    delay(1000000);
    //readButton();
  }// while(1)
} // main() 